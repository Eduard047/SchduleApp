@page "/admin/lunch"
@using Microsoft.AspNetCore.Components.Forms
@using BlazorWasmDotNet8AspNetCoreHosted.Shared.DTOs
@inject BlazorWasmDotNet8AspNetCoreHosted.Client.Services.IAdminApi Admin

<PageTitle>Адмін • Обід</PageTitle>

<h3 class="mb-3">Періоди обіду</h3>

@if (!string.IsNullOrWhiteSpace(error))
{
    <div class="alert alert-danger">@error</div>
}
@if (!string.IsNullOrWhiteSpace(ok))
{
    <div class="alert alert-success">@ok</div>
}

<div class="card p-3 mb-3">
    <div class="row g-2 align-items-end">
        <div class="col-12 col-md-4">
            <label class="form-label">Курс (необов’язково)</label>
            <select class="form-select" @bind="form.CourseId">
                <option value="">Усі курси</option>
                @foreach (var c in courses)
                {
                    <option value="@c.Id">@c.Name</option>
                }
            </select>
        </div>
        <div class="col-6 col-md-2">
            <label class="form-label">Початок</label>
            <InputText class="form-control" type="time" @bind-Value="form.Start" />
        </div>
        <div class="col-6 col-md-2">
            <label class="form-label">Кінець</label>
            <InputText class="form-control" type="time" @bind-Value="form.End" />
        </div>
        <div class="col-12 col-md-2 d-grid">
            <button class="btn btn-primary" @onclick="Save">Зберегти</button>
        </div>
    </div>
</div>

<div class="card p-3">
    <div class="d-flex justify-content-between align-items-center mb-2 gap-2">
        <div class="text-muted small">Показано: @SortedAndFilteredItems.Count() з @items.Count</div>
        <div class="input-group" style="max-width:300px;">
            <span class="input-group-text">Пошук</span>
            <input class="form-control" @bind="filter" @bind:event="oninput" placeholder="Id / курс / час" />
        </div>
    </div>

    <div class="table-responsive">
        <table class="table table-sm align-middle">
            <thead>
                <tr>
                    <th style="width:80px;" role="button" class="sortable-th"
                        @onclick="() => ToggleSort(nameof(LunchConfigEditDto.Id))">
                        Id @HeaderIcon(nameof(LunchConfigEditDto.Id))
                    </th>

                    <th role="button" class="sortable-th"
                        @onclick="() => ToggleSort(CourseNameField)">
                        Курс @HeaderIcon(CourseNameField)
                    </th>

                    <th role="button" class="sortable-th"
                        @onclick="() => ToggleSort(nameof(LunchConfigEditDto.Start))">
                        Початок @HeaderIcon(nameof(LunchConfigEditDto.Start))
                    </th>

                    <th role="button" class="sortable-th"
                        @onclick="() => ToggleSort(nameof(LunchConfigEditDto.End))">
                        Кінець @HeaderIcon(nameof(LunchConfigEditDto.End))
                    </th>

                    <th style="width:160px;"></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var x in SortedAndFilteredItems)
                {
                    <tr>
                        <td>@x.Id</td>
                        <td>@CourseName(x)</td>
                        <td>@x.Start</td>
                        <td>@x.End</td>
                        <td class="text-end">
                            <button class="btn btn-sm btn-outline-primary me-2" @onclick="() => EditRow(x)">Редагувати</button>
                            <button class="btn btn-sm btn-outline-danger" @onclick="() => Delete(x.Id!.Value)">Видалити</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@code {
    private string? error, ok;
    private List<LunchConfigEditDto> items = new();
    private LunchConfigEditDto form = new() { Id = null, CourseId = null, Start = "12:00", End = "13:00" };
    private List<LookupDto> courses = new();

    
    private const string CourseNameField = "CourseName";
    private string sortField = CourseNameField;
    private bool sortAsc = true;
    private string? filter;

    protected override async Task OnInitializedAsync() => await Load();

    private async Task Load()
    {
        try
        {
            error = ok = null;
            items = await Admin.GetLunch();
            var meta = await Admin.GetMeta();
            courses = meta.Courses ?? new();
        }
        catch (Exception ex) { error = ex.Message; }
    }

    private string NameOfCourse(int id)
        => courses.FirstOrDefault(c => c.Id == id)?.Name ?? $"#{id}";

    private string CourseName(LunchConfigEditDto x)
        => x.CourseId is null ? "Усі" : NameOfCourse(x.CourseId.Value);

    private void EditRow(LunchConfigEditDto x)
        => form = new() { Id = x.Id, CourseId = x.CourseId, Start = x.Start, End = x.End };

    private async Task Save()
    {
        try
        {
            await Admin.UpsertLunch(form);
            await Load();
            ok = "Збережено.";
            form = new() { Id = null, CourseId = null, Start = "12:00", End = "13:00" };
        }
        catch (Exception ex) { error = ex.Message; }
    }

    private async Task Delete(int id)
    {
        try
        {
            await Admin.DeleteLunch(id);
            await Load();
            ok = "Видалено.";
        }
        catch (Exception ex) { error = ex.Message; }
    }

    
    private IEnumerable<LunchConfigEditDto> SortedAndFilteredItems
        => ApplySort(ApplyFilter(items));

    private IEnumerable<LunchConfigEditDto> ApplyFilter(IEnumerable<LunchConfigEditDto> seq)
    {
        if (string.IsNullOrWhiteSpace(filter)) return seq;
        var f = filter.Trim();

        return seq.Where(x =>
            (x.Id?.ToString().Contains(f, StringComparison.OrdinalIgnoreCase) ?? false) ||
            CourseName(x).Contains(f, StringComparison.OrdinalIgnoreCase) ||
            (x.Start?.Contains(f, StringComparison.OrdinalIgnoreCase) ?? false) ||
            (x.End?.Contains(f, StringComparison.OrdinalIgnoreCase) ?? false));
    }

    private static TimeSpan TS(string? s)
        => TimeSpan.TryParse(s, out var t) ? t : TimeSpan.Zero;

    private IEnumerable<LunchConfigEditDto> ApplySort(IEnumerable<LunchConfigEditDto> seq)
    {
        return (sortField, sortAsc) switch
        {
            (nameof(LunchConfigEditDto.Id), true) => seq.OrderBy(x => x.Id ?? 0),
            (nameof(LunchConfigEditDto.Id), false) => seq.OrderByDescending(x => x.Id ?? 0),

            (CourseNameField, true) => seq.OrderBy(x => CourseName(x)),
            (CourseNameField, false) => seq.OrderByDescending(x => CourseName(x)),

            (nameof(LunchConfigEditDto.Start), true) => seq.OrderBy(x => TS(x.Start)),
            (nameof(LunchConfigEditDto.Start), false) => seq.OrderByDescending(x => TS(x.Start)),

            (nameof(LunchConfigEditDto.End), true) => seq.OrderBy(x => TS(x.End)),
            (nameof(LunchConfigEditDto.End), false) => seq.OrderByDescending(x => TS(x.End)),

            _ => seq
        };
    }

    private void ToggleSort(string field)
    {
        if (sortField == field) sortAsc = !sortAsc;
        else { sortField = field; sortAsc = true; }
    }

    private MarkupString HeaderIcon(string field)
        => new(sortField == field ? $"<span class=\"ms-1\">{(sortAsc ? "▲" : "▼")}</span>" : "");
}
