@page "/admin/lesson-types"
@using Microsoft.AspNetCore.Components.Forms
@using BlazorWasmDotNet8AspNetCoreHosted.Shared.DTOs
@inject BlazorWasmDotNet8AspNetCoreHosted.Client.Services.IAdminApi Api
@inject IJSRuntime JS

<PageTitle>Адмін • Типи занять</PageTitle>

<h3 class="mb-3">Типи занять</h3>

@if (!string.IsNullOrWhiteSpace(error))
{
    <div class="alert alert-danger">@error</div>
}
@if (!string.IsNullOrWhiteSpace(ok))
{
    <div class="alert alert-success">@ok</div>
}

<div class="row g-3">
    <div class="col-lg-5">
        <div class="card p-3">
            <div class="d-flex justify-content-between align-items-center mb-2">
                <h6 class="m-0">@((form.Id is null ? "Додати тип" : $"Редагувати тип #{form.Id}"))</h6>
                <button class="btn btn-sm btn-success" @onclick="NewItem">+ Новий</button>
            </div>

            <div class="mb-2">
                <label class="form-label">Код</label>
                <input class="form-control" @bind="form.Code" placeholder="LECTURE / SEMINAR / LAB / BREAK / CANCELED / PRACTICE / EXAM ..." />
            </div>
            <div class="mb-2">
                <label class="form-label">Назва</label>
                <input class="form-control" @bind="form.Name" />
            </div>

            <div class="row g-2">
                <div class="col-12">
                    <label class="form-label">Колір на розкладі</label>

                    @if (palette.Count == 0)
                    {
                        <div class="form-text text-muted">Завантаження палітри…</div>
                    }
                    else
                    {
                        <InputRadioGroup TValue="string" @bind-Value="form.CssKey" Name="color" @bind-Value:after="OnCssSelected">
                            <div class="palette-grid">
                                @foreach (var c in palette)
                                {
                                    var isMine = form.Id.HasValue && c.UsedByTypeId.HasValue && c.UsedByTypeId.Value == form.Id.Value;
                                    var disabled = c.IsUsed && !isMine;

                                    <label class="palette-item" title="@($"{c.Name} ({c.Key})")">
                                        <InputRadio TValue="string" Value="@c.Key" Disabled="disabled" />
                                        <span class="swatch @c.Key"></span>
                                        <span class="caption">
                                            <code>@c.Key</code>
                                            <small class="text-muted d-block">@c.Name</small>
                                        </span>
                                    </label>
                                }
                            </div>
                        </InputRadioGroup>
                        <div class="small text-muted mt-1">Оберіть один вільний колір. Зайняті варіанти недоступні.</div>
                    }
                </div>

                <div class="col-12">
                    <label class="form-label d-block">Активний</label>
                    <input type="checkbox" class="form-check-input" @bind="form.IsActive" />
                </div>
            </div>

            <hr />

            <div class="row row-cols-1 row-cols-md-2 g-2">
                <div class="col"><div class="form-check"><input class="form-check-input" type="checkbox" @bind="form.RequiresRoom" /> <label class="form-check-label">Потребує аудиторію</label></div></div>
                <div class="col"><div class="form-check"><input class="form-check-input" type="checkbox" @bind="form.RequiresTeacher" /> <label class="form-check-label">Потребує викладача</label></div></div>
                <div class="col"><div class="form-check"><input class="form-check-input" type="checkbox" @bind="form.BlocksRoom" /> <label class="form-check-label">Блокує аудиторію</label></div></div>
                <div class="col"><div class="form-check"><input class="form-check-input" type="checkbox" @bind="form.BlocksTeacher" /> <label class="form-check-label">Блокує викладача</label></div></div>
                <div class="col"><div class="form-check"><input class="form-check-input" type="checkbox" @bind="form.CountInPlan" /> <label class="form-check-label">Рахується у плані</label></div></div>
                <div class="col"><div class="form-check"><input class="form-check-input" type="checkbox" @bind="form.CountInLoad" /> <label class="form-check-label">Рахується у навант.</label></div></div>
                <div class="col"><div class="form-check"><input class="form-check-input" type="checkbox" @bind="form.PreferredFirstInWeek" /> <label class="form-check-label">Бажано першим у тижні</label></div></div>
            </div>

            <div class="mt-3 d-grid">
                <button class="btn btn-primary" @onclick="Save">Зберегти</button>
            </div>
        </div>
    </div>

    <div class="col-lg-7">
        <div class="card p-3">
            <div class="d-flex justify-content-between align-items-center mb-2 gap-2">
                <h6 class="m-0">Список типів</h6>

                <div class="input-group" style="max-width:360px;">
                    <span class="input-group-text">Пошук</span>
                    <input class="form-control" @bind="filter" @bind:event="oninput" placeholder="Id / код / назва / css" />
                </div>
            </div>

            <div class="table-responsive">
                <table class="table table-sm align-middle">
                    <thead>
                        <tr>
                            <th style="width:60px;" class="sortable-th" role="button" @onclick="() => ToggleSort(nameof(LessonTypeEditDto.Id))">
                                Id @HeaderIcon(nameof(LessonTypeEditDto.Id))
                            </th>
                            <th class="sortable-th" role="button" @onclick="() => ToggleSort(nameof(LessonTypeEditDto.Code))">
                                Код @HeaderIcon(nameof(LessonTypeEditDto.Code))
                            </th>
                            <th class="sortable-th" role="button" @onclick="() => ToggleSort(nameof(LessonTypeEditDto.Name))">
                                Назва @HeaderIcon(nameof(LessonTypeEditDto.Name))
                            </th>
                            <th class="sortable-th" role="button" @onclick="() => ToggleSort(nameof(LessonTypeEditDto.CssKey))">
                                CSS @HeaderIcon(nameof(LessonTypeEditDto.CssKey))
                            </th>
                            <th class="text-center sortable-th" role="button" title="Активний" @onclick="() => ToggleSort(nameof(LessonTypeEditDto.IsActive))">
                                Act @HeaderIcon(nameof(LessonTypeEditDto.IsActive))
                            </th>
                            <th class="text-center sortable-th" role="button" title="Потребує аудиторію" @onclick="() => ToggleSort(nameof(LessonTypeEditDto.RequiresRoom))">
                                ReqR @HeaderIcon(nameof(LessonTypeEditDto.RequiresRoom))
                            </th>
                            <th class="text-center sortable-th" role="button" title="Потребує викладача" @onclick="() => ToggleSort(nameof(LessonTypeEditDto.RequiresTeacher))">
                                ReqT @HeaderIcon(nameof(LessonTypeEditDto.RequiresTeacher))
                            </th>
                            <th class="text-center sortable-th" role="button" title="Блокує аудиторію" @onclick="() => ToggleSort(nameof(LessonTypeEditDto.BlocksRoom))">
                                BlkR @HeaderIcon(nameof(LessonTypeEditDto.BlocksRoom))
                            </th>
                            <th class="text-center sortable-th" role="button" title="Блокує викладача" @onclick="() => ToggleSort(nameof(LessonTypeEditDto.BlocksTeacher))">
                                BlkT @HeaderIcon(nameof(LessonTypeEditDto.BlocksTeacher))
                            </th>
                            <th class="text-center sortable-th" role="button" title="Врах. у плані" @onclick="() => ToggleSort(nameof(LessonTypeEditDto.CountInPlan))">
                                Plan @HeaderIcon(nameof(LessonTypeEditDto.CountInPlan))
                            </th>
                            <th class="text-center sortable-th" role="button" title="Врах. у навантаж." @onclick="() => ToggleSort(nameof(LessonTypeEditDto.CountInLoad))">
                                Load @HeaderIcon(nameof(LessonTypeEditDto.CountInLoad))
                            </th>
                            <th class="text-center sortable-th" role="button" title="Першим у тижні" @onclick="() => ToggleSort(nameof(LessonTypeEditDto.PreferredFirstInWeek))">
                                1st @HeaderIcon(nameof(LessonTypeEditDto.PreferredFirstInWeek))
                            </th>
                            <th style="width:160px;"></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var x in SortedItems)
                        {
                            <tr>
                                <td>@x.Id</td>
                                <td>@x.Code</td>
                                <td><span class="badge-soft @x.CssKey">@x.Name</span></td>
                                <td><code>@x.CssKey</code></td>
                                <td class="text-center">@(x.IsActive ? "✓" : "—")</td>
                                <td class="text-center">@(x.RequiresRoom ? "✓" : "—")</td>
                                <td class="text-center">@(x.RequiresTeacher ? "✓" : "—")</td>
                                <td class="text-center">@(x.BlocksRoom ? "✓" : "—")</td>
                                <td class="text-center">@(x.BlocksTeacher ? "✓" : "—")</td>
                                <td class="text-center">@(x.CountInPlan ? "✓" : "—")</td>
                                <td class="text-center">@(x.CountInLoad ? "✓" : "—")</td>
                                <td class="text-center">@(x.PreferredFirstInWeek ? "✓" : "—")</td>
                                <td class="text-end">
                                    <button class="btn btn-sm btn-outline-primary me-2" @onclick="() => Edit(x)">Редагувати</button>
                                    <button class="btn btn-sm btn-outline-danger" @onclick="() => Delete(x.Id!.Value)">Видалити</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <div class="d-flex justify-content-between">
                <small class="text-muted">Показано: @SortedItems.Count() з @items.Count</small>
                <small class="text-muted">Підказка: <code>BREAK</code> з вимкнутими Requires/Blocks/Count — це «перерва».</small>
            </div>
        </div>
    </div>
</div>

@code {
    private string? error, ok;
    private List<LessonTypeEditDto> items = new();
    private LessonTypeEditDto form = NewForm();

    private List<LessonColorDto> palette = new();

    
    private string? filter;

    
    private string sortField = nameof(LessonTypeEditDto.Id);
    private bool sortAsc = true;

    protected override async Task OnInitializedAsync() => await Load();

    private static LessonTypeEditDto NewForm() => new()
    {
        Id = null,
        Code = "",
        Name = "",
        IsActive = true,
        RequiresRoom = true,
        RequiresTeacher = true,
        BlocksRoom = true,
        BlocksTeacher = true,
        CountInPlan = true,
        CountInLoad = true,
        PreferredFirstInWeek = false,
        CssKey = null
    };

    private static LessonTypeEditDto Clone(LessonTypeEditDto x) => new()
    {
        Id = x.Id,
        Code = x.Code,
        Name = x.Name,
        IsActive = x.IsActive,
        RequiresRoom = x.RequiresRoom,
        RequiresTeacher = x.RequiresTeacher,
        BlocksRoom = x.BlocksRoom,
        BlocksTeacher = x.BlocksTeacher,
        CountInPlan = x.CountInPlan,
        CountInLoad = x.CountInLoad,
        PreferredFirstInWeek = x.PreferredFirstInWeek,
        CssKey = x.CssKey
    };

    private async Task Load()
    {
        try
        {
            error = ok = null;
            items = await Api.GetLessonTypes();
            palette = await Api.GetLessonColorPalette();

            
            if (form.Id is null && string.IsNullOrWhiteSpace(form.CssKey))
            {
                var free = palette.FirstOrDefault(p => !p.IsUsed);
                if (free is not null) form.CssKey = free.Key;
            }
        }
        catch (Exception ex) { error = ex.Message; }
    }

    private void NewItem()
    {
        form = NewForm();
        var free = palette.FirstOrDefault(c => !c.IsUsed);
        if (free is not null) form.CssKey = free.Key;
    }

    private void Edit(LessonTypeEditDto x)
    {
        form = Clone(x);
        _ = RefreshPalette();
    }

    private async Task RefreshPalette()
    {
        try { palette = await Api.GetLessonColorPalette(); }
        catch {  }
        StateHasChanged();
    }

    private async Task Save()
    {
        try
        {
            error = ok = null;
            await Api.UpsertLessonType(form);
            await Load();
            ok = "Збережено.";
            NewItem();
        }
        catch (HttpRequestException ex) { error = ex.Message; }
        catch (Exception ex) { error = ex.Message; }
    }

    private async Task Delete(int id)
    {
        try
        {
            if (!await JS.InvokeAsync<bool>("confirm", $"Видалити тип #{id}?")) return;
            await Api.DeleteLessonType(id);
            await Load();
            ok = "Видалено.";
        }
        catch (HttpRequestException ex) when (ex.Message.Contains("409"))
        {
            error = "Тип заняття використовується у розкладі. Видалення заборонено. Ви можете вимкнути його (IsActive = Ні).";
        }
        catch (Exception ex) { error = ex.Message; }
    }

    
    private void OnCssSelected() => StateHasChanged();

    
    private IEnumerable<LessonTypeEditDto> ApplyFilter(IEnumerable<LessonTypeEditDto> seq)
    {
        if (string.IsNullOrWhiteSpace(filter)) return seq;
        var f = filter.Trim();

        return seq.Where(x =>
            (x.Id?.ToString().Contains(f, StringComparison.OrdinalIgnoreCase) ?? false) ||
            (x.Code?.Contains(f, StringComparison.OrdinalIgnoreCase) ?? false) ||
            (x.Name?.Contains(f, StringComparison.OrdinalIgnoreCase) ?? false) ||
            (x.CssKey?.Contains(f, StringComparison.OrdinalIgnoreCase) ?? false)
        );
    }

    
    private IEnumerable<LessonTypeEditDto> ApplySort(IEnumerable<LessonTypeEditDto> seq)
    {
        return (sortField, sortAsc) switch
        {
            (nameof(LessonTypeEditDto.Id), true) => seq.OrderBy(x => x.Id),
            (nameof(LessonTypeEditDto.Id), false) => seq.OrderByDescending(x => x.Id),

            (nameof(LessonTypeEditDto.Code), true) => seq.OrderBy(x => x.Code),
            (nameof(LessonTypeEditDto.Code), false) => seq.OrderByDescending(x => x.Code),

            (nameof(LessonTypeEditDto.Name), true) => seq.OrderBy(x => x.Name),
            (nameof(LessonTypeEditDto.Name), false) => seq.OrderByDescending(x => x.Name),

            (nameof(LessonTypeEditDto.CssKey), true) => seq.OrderBy(x => x.CssKey),
            (nameof(LessonTypeEditDto.CssKey), false) => seq.OrderByDescending(x => x.CssKey),

            (nameof(LessonTypeEditDto.IsActive), true) => seq.OrderBy(x => x.IsActive).ThenBy(x => x.Name),
            (nameof(LessonTypeEditDto.IsActive), false) => seq.OrderByDescending(x => x.IsActive).ThenByDescending(x => x.Name),

            (nameof(LessonTypeEditDto.RequiresRoom), true) => seq.OrderBy(x => x.RequiresRoom).ThenBy(x => x.Name),
            (nameof(LessonTypeEditDto.RequiresRoom), false) => seq.OrderByDescending(x => x.RequiresRoom).ThenByDescending(x => x.Name),

            (nameof(LessonTypeEditDto.RequiresTeacher), true) => seq.OrderBy(x => x.RequiresTeacher).ThenBy(x => x.Name),
            (nameof(LessonTypeEditDto.RequiresTeacher), false) => seq.OrderByDescending(x => x.RequiresTeacher).ThenByDescending(x => x.Name),

            (nameof(LessonTypeEditDto.BlocksRoom), true) => seq.OrderBy(x => x.BlocksRoom).ThenBy(x => x.Name),
            (nameof(LessonTypeEditDto.BlocksRoom), false) => seq.OrderByDescending(x => x.BlocksRoom).ThenByDescending(x => x.Name),

            (nameof(LessonTypeEditDto.BlocksTeacher), true) => seq.OrderBy(x => x.BlocksTeacher).ThenBy(x => x.Name),
            (nameof(LessonTypeEditDto.BlocksTeacher), false) => seq.OrderByDescending(x => x.BlocksTeacher).ThenByDescending(x => x.Name),

            (nameof(LessonTypeEditDto.CountInPlan), true) => seq.OrderBy(x => x.CountInPlan).ThenBy(x => x.Name),
            (nameof(LessonTypeEditDto.CountInPlan), false) => seq.OrderByDescending(x => x.CountInPlan).ThenByDescending(x => x.Name),

            (nameof(LessonTypeEditDto.CountInLoad), true) => seq.OrderBy(x => x.CountInLoad).ThenBy(x => x.Name),
            (nameof(LessonTypeEditDto.CountInLoad), false) => seq.OrderByDescending(x => x.CountInLoad).ThenByDescending(x => x.Name),

            (nameof(LessonTypeEditDto.PreferredFirstInWeek), true) => seq.OrderBy(x => x.PreferredFirstInWeek).ThenBy(x => x.Name),
            (nameof(LessonTypeEditDto.PreferredFirstInWeek), false) => seq.OrderByDescending(x => x.PreferredFirstInWeek).ThenByDescending(x => x.Name),

            _ => seq
        };
    }

    private IEnumerable<LessonTypeEditDto> SortedItems => ApplySort(ApplyFilter(items));

    private void ToggleSort(string field)
    {
        if (sortField == field) sortAsc = !sortAsc;
        else { sortField = field; sortAsc = true; }
    }

    private MarkupString HeaderIcon(string field)
        => new(sortField == field ? $"<span class=\"ms-1\">{(sortAsc ? "▲" : "▼")}</span>" : "");
}

<style>
    
    .sortable-th {
        cursor: pointer;
        user-select: none;
        white-space: nowrap;
    }

    .badge-soft {
        display: inline-block;
        padding: 2px 8px;
        border-radius: 999px;
        font-size: 12px;
        font-weight: 600;
        background: #eef2f7;
    }

    
    .lec {
        background: #e9f3ff;
    }

    .sem {
        background: #eafaf0;
    }

    .lab {
        background: #fff7df;
    }

    .prc {
        background: #efe5ff;
    }

    .brk {
        background: #f1f5f9;
    }

    .can {
        background: #ffe9e9;
        text-decoration: line-through;
    }

    .c7 {
        background: #E7F4FF;
    }

    .c8 {
        background: #E6FFF5;
    }

    .c9 {
        background: #FFFBE6;
    }

    .c10 {
        background: #F3E8FF;
    }

    
    .palette-grid {
        display: grid;
        grid-template-columns: repeat(2, minmax(0, 1fr));
        gap: .5rem;
    }

    @@media (min-width: 576px) {
        .palette-grid {
            grid-template-columns: repeat(3, minmax(0, 1fr));
        }
    }

    .palette-item {
        display: flex;
        align-items: center;
        gap: .5rem;
        border: 1px solid #e5e7eb;
        border-radius: .5rem;
        padding: .4rem .5rem;
        background: #fff;
        user-select: none;
    }

        .palette-item input[type="radio"] {
            margin-right: .25rem;
        }

            .palette-item input[type="radio"]:disabled + .swatch {
                opacity: .4;
            }

        .palette-item .swatch {
            display: inline-block;
            width: 28px;
            height: 20px;
            border-radius: 4px;
            border: 1px solid rgba(0,0,0,.08);
        }

        .palette-item .caption {
            line-height: 1;
        }
</style>
